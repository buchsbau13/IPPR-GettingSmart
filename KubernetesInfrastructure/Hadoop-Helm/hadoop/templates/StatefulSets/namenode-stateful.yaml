apiVersion: v1
kind: Service
metadata:
  name: namenode
  labels:
    app: namenode
spec:
  ports:
  - port: 9870
    name: webhdfs
  - port: 9000
    name: defaultfs
  clusterIP: None
  selector:
     app: namenode
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hadoop-namenode
spec:
  selector:
    matchLabels:
      app: namenode # has to match .spec.template.metadata.labels
  serviceName: "namenode"
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: namenode # has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: namenode
        image: {{ .Values.images.namenode }}:{{ .Values.images.tag }}
        ports:
        - containerPort: 9870
          name: webhdfs
        - containerPort: 9000
          name: defaultfs
        volumeMounts:
        - name: nfs-hadoop-pv-1
          mountPath: /hdfs/volume1/name
        - name: namenode-config
          mountPath: /opt/hadoop/etc/hadoop/core-site.xml
          subPath: core-site.xml
        - name: namenode-config
          mountPath: /opt/hadoop/etc/hadoop/hdfs-site.xml
          subPath: hdfs-site.xml
        - name: namenode-config
          mountPath: /opt/hadoop/etc/hadoop/mapred-site.xml
          subPath: mapred-site.xml
        - name: namenode-config
          mountPath: /opt/hadoop/etc/hadoop/yarn-site.xml
          subPath: yarn-site.xml
      volumes:
      - name: namenode-config
        configMap:
          name: namenode-config
  volumeClaimTemplates:
  - metadata:
      name: nfs-hadoop-pv-1
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: "nfs-hadoop"
      resources:
        requests:
          storage: 2Gi